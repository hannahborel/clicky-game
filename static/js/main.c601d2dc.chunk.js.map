{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Card/Card.js","components/Header/Header.js","components/Grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","style","backgroundImage","src","alt","onClick","handleClick","name","Header","id","score","Grid","state","icons","iconBlocks","resetGame","setState","handleCorrect","newicons","shuffleArray","console","log","handleWrong","guessedCorrect","map","femme","newPic","clicked","i","length","j","Math","floor","random","this","icon","key","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wsCAIeA,EAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,W,sBCY1CC,G,MAXF,SAAAH,GACT,OACI,yBACII,MAAO,CAACC,gBAAgB,OAAD,OAAQL,EAAMM,IAAd,MACvBC,IAAKP,EAAMO,IACXN,UAAU,QACVO,QAAS,kBAAMR,EAAMS,YAAYT,EAAMU,WCCpCC,G,MAPA,SAAAX,GAAK,OAChB,yBAAKY,GAAG,kBAAkBX,UAAU,aAChC,yBAAKW,GAAG,SAAR,4BACA,yBAAKA,GAAG,cAAR,qCACA,yBAAKA,GAAG,YAAR,UAA2BZ,EAAMa,UC8E1BC,E,2MA7EXC,MAAQ,CACJC,MAAOC,EACPJ,MAAO,G,EAGXK,UAAY,WACR,EAAKC,SAAS,CACVN,MAAO,EACPG,MAAOC,K,EAIfG,cAAgB,SAAAC,GACZ,EAAKF,SAAS,CACVH,MAAO,EAAKM,aAAaD,GACzBR,MAAO,EAAKE,MAAMF,MAAQ,IAGL,KAArB,EAAKE,MAAMF,QACX,EAAKK,YACLK,QAAQC,IAAI,c,EAKpBC,YAAc,WACV,EAAKP,a,EAGTT,YAAc,SAAAC,GACV,IAAIgB,GAAiB,EACfL,EAAW,EAAKN,MAAMC,MAAMW,KAAI,SAAAC,GAClC,IAAMC,EAAM,eAAQD,GASpB,OARIC,EAAOnB,OAASA,IACXmB,EAAOC,UACRP,QAAQC,IAAI,+BACZK,EAAOC,SAAU,EACjBJ,GAAiB,IAIlBG,KAEXN,QAAQC,IAAI,oBAAqBE,GACjCA,EAAiB,EAAKN,cAAcC,GAAY,EAAKI,YAAYJ,I,EAGrEC,aAAe,SAAAN,GACX,IAAK,IAAIe,EAAIf,EAAMgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEhB,CAACf,EAAMiB,GAAIjB,EAAMe,IAAvCf,EAAMe,GAFgC,KAE5Bf,EAAMiB,GAFsB,KAI3C,OAAQjB,G,wEAGF,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAAQH,MAAOwB,KAAKtB,MAAMF,QAC1B,yBAAKZ,UAAU,eACX,yBAAKA,UAAU,QACVoC,KAAKtB,MAAMC,MAAMW,KAAI,SAAAW,GAClB,OAAQ,kBAAC,EAAD,CACJ5B,KAAM4B,EAAK5B,KACX6B,IAAKD,EAAK5B,KACVD,YAAa,EAAKA,YAClBH,IAAKgC,EAAKE,MACVjC,IAAK+B,EAAK5B,iB,GApEvB+B,aCUJC,E,iLARX,OACE,kBAAC,EAAD,KACI,kBAAC,EAAD,W,GALQD,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c601d2dc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => {\n    return(\n        <div\n            style={{backgroundImage:`url(${props.src})`}}\n            alt={props.alt}\n            className=\"block\"\n            onClick={() => props.handleClick(props.name)}>\n        </div>\n    )\n};\n\nexport default Card;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n    <div id=\"headerContainer\" className=\"container\">\n        <div id=\"title\">Bobs Burgers Memory Game</div>\n        <div id=\"directions\">Don't click the same image twice!</div>\n        <div id=\"scoreDiv\">Score: {props.score}</div>\n    </div>\n);\nexport default Header;","import React, { Component } from \"react\";\nimport \"./Grid.css\";\nimport iconBlocks from \"../../characters.json\";\nimport Card from \"../Card\";\nimport Header from \"../Header/Header\";\n\n\nclass Grid extends Component {\n    state = {\n        icons: iconBlocks,\n        score: 0\n    }\n\n    resetGame = () => {\n        this.setState({\n            score: 0,\n            icons: iconBlocks\n        })\n    }\n\n    handleCorrect = newicons => {\n        this.setState({\n            icons: this.shuffleArray(newicons),\n            score: this.state.score + 1,\n        });\n\n        if (this.state.score === 11) {\n            this.resetGame();\n            console.log(\"You won!\");\n        }\n\n    };\n\n    handleWrong = () => {\n        this.resetGame();\n    };\n\n    handleClick = name => {\n        let guessedCorrect = false;\n        const newicons = this.state.icons.map(femme => {\n            const newPic = { ...femme };\n            if (newPic.name === name) {\n                if (!newPic.clicked) {\n                    console.log(\"Already guessed------------\");\n                    newPic.clicked = true;\n                    guessedCorrect = true;\n                }\n\n            }\n            return newPic;\n        })\n        console.log(\"GUESSED CORRECT: \", guessedCorrect)\n        guessedCorrect ? this.handleCorrect(newicons) : this.handleWrong(newicons)\n    };\n\n    shuffleArray = icons => {\n        for (let i = icons.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [icons[i], icons[j]] = [icons[j], icons[i]];\n        }\n        return (icons);\n    };\n\n    render() {\n        return (\n            <div>\n                <Header score={this.state.score} />\n                <div className=\"gridWrapper\">\n                    <div className=\"grid\">\n                        {this.state.icons.map(icon => {\n                            return (<Card\n                                name={icon.name}\n                                key={icon.name}\n                                handleClick={this.handleClick}\n                                src={icon.image}\n                                alt={icon.name}\n                            />)\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Grid;","  \nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Grid from \"./components/Grid/Grid\";\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <Wrapper>\n          <Grid />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}