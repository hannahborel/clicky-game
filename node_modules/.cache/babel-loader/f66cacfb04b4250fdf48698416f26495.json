{"ast":null,"code":"import _objectSpread from \"/Users/hannahborel/Desktop/Bootcamp/Homework/clicky-game/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/hannahborel/Desktop/Bootcamp/Homework/clicky-game/src/components/Grid/Grid.js\";\nimport React, { Component } from \"react\";\nimport \"./Grid.css\";\nimport iconBlocks from \"../../characters.json\";\nimport Card from \"../Card\";\nimport Header from \"../Header/Header\";\n\nclass Grid extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      icons: iconBlocks,\n      score: 0\n    };\n\n    this.resetGame = () => {\n      this.setState({\n        score: 0,\n        icons: iconBlocks\n      });\n    };\n\n    this.handleCorrect = newicons => {\n      this.setState({\n        icons: this.shuffleArray(newicons),\n        score: this.state.score + 1\n      });\n\n      if (this.state.score === 11) {\n        this.resetGame();\n        console.log(\"You won!\");\n      }\n    };\n\n    this.handleWrong = () => {\n      this.resetGame();\n    };\n\n    this.handleClick = name => {\n      let guessedCorrect = false;\n      const newicons = this.state.icons.map(femme => {\n        const newPic = _objectSpread({}, femme);\n\n        if (newPic.name === name) {\n          if (!newPic.clicked) {\n            console.log(\"Already guessed------------\");\n            newPic.clicked = true;\n            guessedCorrect = true;\n          }\n        }\n\n        return newPic;\n      });\n      console.log(\"GUESSED CORRECT: \", guessedCorrect);\n      guessedCorrect ? this.handleCorrect(newicons) : this.handleWrong(newicons);\n    };\n\n    this.shuffleArray = icons => {\n      for (let i = icons.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [icons[j], icons[i]];\n        icons[i] = _ref[0];\n        icons[j] = _ref[1];\n      }\n\n      return icons;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"gridWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.icons.map(icon => {\n      return React.createElement(Card, {\n        name: icon.name,\n        key: icon.name,\n        handleClick: this.handleClick,\n        src: icon.image,\n        alt: icon.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}\n\n;\nexport default Grid;","map":{"version":3,"sources":["/Users/hannahborel/Desktop/Bootcamp/Homework/clicky-game/src/components/Grid/Grid.js"],"names":["React","Component","iconBlocks","Card","Header","Grid","state","icons","score","resetGame","setState","handleCorrect","newicons","shuffleArray","console","log","handleWrong","handleClick","name","guessedCorrect","map","femme","newPic","clicked","i","length","j","Math","floor","random","render","icon","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Grid.css\";\nimport iconBlocks from \"../../characters.json\";\nimport Card from \"../Card\";\nimport Header from \"../Header/Header\";\n\n\nclass Grid extends Component {\n    state = {\n        icons: iconBlocks,\n        score: 0\n    }\n\n    resetGame = () => {\n        this.setState({\n            score: 0,\n            icons: iconBlocks\n        })\n    }\n\n    handleCorrect = newicons => {\n        this.setState({\n            icons: this.shuffleArray(newicons),\n            score: this.state.score + 1,\n        });\n\n        if (this.state.score === 11) {\n            this.resetGame();\n            console.log(\"You won!\");\n        }\n\n    };\n\n    handleWrong = () => {\n        this.resetGame();\n    };\n\n    handleClick = name => {\n        let guessedCorrect = false;\n        const newicons = this.state.icons.map(femme => {\n            const newPic = { ...femme };\n            if (newPic.name === name) {\n                if (!newPic.clicked) {\n                    console.log(\"Already guessed------------\");\n                    newPic.clicked = true;\n                    guessedCorrect = true;\n                }\n\n            }\n            return newPic;\n        })\n        console.log(\"GUESSED CORRECT: \", guessedCorrect)\n        guessedCorrect ? this.handleCorrect(newicons) : this.handleWrong(newicons)\n    };\n\n    shuffleArray = icons => {\n        for (let i = icons.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [icons[i], icons[j]] = [icons[j], icons[i]];\n        }\n        return (icons);\n    };\n\n    render() {\n        return (\n            <div>\n                <Header score={this.state.score} />\n                <div className=\"gridWrapper\">\n                    <div className=\"grid\">\n                        {this.state.icons.map(icon => {\n                            return (<Card\n                                name={icon.name}\n                                key={icon.name}\n                                handleClick={this.handleClick}\n                                src={icon.image}\n                                alt={icon.name}\n                            />)\n                        })}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}